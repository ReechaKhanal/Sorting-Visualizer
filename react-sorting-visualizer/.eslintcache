[{"C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\index.js":"1","C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\mergeSort.js":"2","C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\heapSort.js":"3","C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\insertionSort.js":"4"},{"size":6402,"mtime":1607241452603,"results":"5","hashOfConfig":"6"},{"size":1903,"mtime":1605247402548,"results":"7","hashOfConfig":"6"},{"size":1283,"mtime":1605341812052,"results":"8","hashOfConfig":"6"},{"size":599,"mtime":1605247571453,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"hxpot4",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\index.js",["20","21","22","23"],"C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\mergeSort.js",["24"],"export function performMergeSort(toBeSorted){\r\n\r\n\tvar updatedState = [];\r\n\r\n\tvar temp = new Array(30).fill(0);\r\n\t\t\r\n\tvar output = merge_sort(updatedState, toBeSorted, temp, 0, temp.length-1);\r\n\t\t\r\n\tupdatedState = output[0];\r\n\ttoBeSorted = output[1];\r\n\r\n\treturn updatedState;\r\n}\r\n\r\nfunction merge_sort_helper(updatedState, toBeSorted, temp, left, mid, right){\r\n\t\t\r\n\tvar leftStart = left, leftEnd = mid, rightStart = mid+1, rightEnd = right;\r\n\tvar array_size = rightEnd - leftStart + 1;\r\n\tvar index = leftStart;\r\n\r\n\twhile ((leftStart <= leftEnd) && (rightStart <= rightEnd)){\r\n\t\tif (toBeSorted[leftStart] <= toBeSorted[rightStart]){\r\n\t\t\t\r\n\t\t\ttemp[index] = toBeSorted[leftStart];\r\n\t\t\tleftStart = leftStart + 1;\r\n\t\t}\r\n\t\telse{\r\n\t\t\ttemp[index] = toBeSorted[rightStart];\r\n\t\t\trightStart = rightStart + 1;\r\n\t\t}\r\n\t\tindex = index + 1\r\n\t}\r\n\r\n\twhile (leftStart <= leftEnd){\r\n\t\ttemp[index] = toBeSorted[leftStart];\r\n\t\tindex = index + 1;\r\n\t\tleftStart = leftStart + 1;\r\n\t}\r\n\twhile (rightStart <= rightEnd){\r\n\t\ttemp[index] = toBeSorted[rightStart];\r\n\t\tindex = index + 1;\r\n\t\trightStart = rightStart + 1;\r\n\t}\r\n\r\n\tfor (var i = left; i <= right; i++){\r\n\t\ttoBeSorted[i] = temp[i]\r\n\t}\r\n\r\n\tvar test = [];\t\t\r\n\tfor (var k=0; k<toBeSorted.length; k++){\r\n\t\ttest.push(toBeSorted[k])\r\n\t}\r\n\r\n\tupdatedState.push(test);\r\n\treturn [updatedState, toBeSorted];\r\n}\r\n\r\nfunction merge_sort(updatedState, toBeSorted, temp, left, right){\r\n\r\n\tif (( (left >= 0) && (right < toBeSorted.length) )  && (left < right)){\r\n\r\n\t\tvar mid = Math.floor((left+right)/2);\r\n\r\n\t\tvar output = merge_sort(updatedState, toBeSorted, temp, left, mid);\r\n\t\tupdatedState = output[0];\r\n\t\ttoBeSorted = output[1];\r\n\t\toutput = merge_sort(updatedState, toBeSorted, temp, mid+1, right);\r\n\t\tupdatedState = output[0];\r\n\t\ttoBeSorted = output[1];\r\n\r\n\t\treturn merge_sort_helper(updatedState, toBeSorted, temp, left, mid, right);\r\n\t}else{\r\n\t\treturn [updatedState, toBeSorted]\r\n\t}\r\n}","C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\heapSort.js",["25"],"function heapify(updatedState, inputarray, size, index){\r\n\t\t\r\n\tvar largest = index;\r\n\tvar left = index*2 + 1;\r\n\tvar right = index*2 + 2;\r\n\t\t\r\n\tif ((left < size) && (inputarray[index] < inputarray[left])){\r\n\t\tlargest = left;\r\n\t}\r\n\tif ((right < size) && (inputarray[largest] < inputarray[right])){\r\n\t\tlargest = right;\r\n\t}\r\n\tif (largest !== index){\r\n\t\t\r\n\t\tvar a = inputarray[index];\r\n\t\tvar b = inputarray[largest];\r\n\r\n\t\tinputarray[index] = b;\r\n\t\tinputarray[largest] = a;\r\n\t\t\t\r\n\t\theapify(updatedState, inputarray, size, largest);\r\n\t}\r\n\r\n\tvar test = [];\r\n\tfor (var k=0; k<inputarray.length; k++){\r\n\t\tvar j = inputarray[k];\r\n\t\ttest.push(j);\r\n\t}\r\n\tupdatedState.push(test);\r\n\r\n\treturn [updatedState, inputarray];\r\n}\r\n\r\nexport function performHeapSort(toBeSorted){\r\n\t\r\n\tvar updatedState = [];\r\n\r\n\tvar n = toBeSorted.length;\r\n\tvar start = Math.floor(n/2);\r\n\t\t\r\n\t\r\n\tfor (var i = start-1; i > -1; i--){\r\n\t\tvar output = heapify(updatedState, toBeSorted, n, i);\r\n\t\tupdatedState = output[0];\r\n\t\ttoBeSorted = output[1];\r\n\t}\r\n\r\n\tfor (i = n-1; i > 0; i--){\r\n\t\tvar a = toBeSorted[i];\r\n\t\tvar b = toBeSorted[0];\r\n\r\n\t\ttoBeSorted[i] = b;\r\n\t\ttoBeSorted[0] = a;\r\n\r\n\t\tvar output = heapify(updatedState, toBeSorted, i, 0);\r\n\t\tupdatedState = output[0];\r\n\t\ttoBeSorted = output[1];\r\n\r\n\t}\r\n\treturn updatedState;\r\n}","C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\insertionSort.js",[],{"ruleId":"26","severity":1,"message":"27","line":161,"column":12,"nodeType":"28","messageId":"29","endLine":161,"endColumn":14},{"ruleId":"26","severity":1,"message":"27","line":163,"column":19,"nodeType":"28","messageId":"29","endLine":163,"endColumn":21},{"ruleId":"26","severity":1,"message":"27","line":165,"column":19,"nodeType":"28","messageId":"29","endLine":165,"endColumn":21},{"ruleId":"30","severity":1,"message":"31","line":196,"column":9,"nodeType":"32","endLine":196,"endColumn":11,"suggestions":"33"},{"ruleId":"34","severity":1,"message":"35","line":18,"column":6,"nodeType":"36","messageId":"37","endLine":18,"endColumn":16},{"ruleId":"38","severity":1,"message":"39","line":55,"column":7,"nodeType":"36","messageId":"40","endLine":55,"endColumn":13},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'work.length'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-unused-vars","'array_size' is assigned a value but never used.","Identifier","unusedVar","no-redeclare","'output' is already defined.","redeclared",{"desc":"42","fix":"43"},"Update the dependencies array to be: [work.length]",{"range":"44","text":"45"},[5746,5748],"[work.length]"]